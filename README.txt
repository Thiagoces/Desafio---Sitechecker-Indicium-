Projeto Criado com o Aux√≠lio do professor Daniel faz parte do programa
Ligthouse da Indicium. 

Descri√ß√£o do passo a passo utilizado:

1) Donwloads necess√°rios: 
Primeiro, como o sistema operacional utilizado foi windows, √© necess√°rio baixar a linguagem python para a m√°quina no seguinte link: https://www.python.org/ 
Realizado o donwload do python √© ideal utilizar alguma IDE para poder utilizado os c√≥digos e comandos  python. A IDE utilizada foi a Visual Studio Code (Vscode), encontrado no seguinte link: https://code.visualstudio.com/

2) Cria√ß√£o do Ambiente de Trabalho:
Para cria√ß√£o de um projeto em python √© recomend√°vel utilizar ambientes virtuais, pois, um ambiente virtual empacota todas as depend√™ncias que um projeto precisa e armazena em um diret√≥rio, fazendo com que nenhum pacote seja instalado diretamente no sistema operacional. Sendo assim, cada projeto pode possuir seu pr√≥prio ambiente e, consequentemente, suas bibliotecas em vers√µes espec√≠ficas. Para criar o ambiente virtual abre-se o vscode e coloca-se o seguinte comando:

cd meuprojeto/
python -m venv venv
source venv/bin/activate

Para Windows, o comando dever√° ser o seguinte>

PS> python -m venv venv
PS> venv\Scripts\activate
(venv) PS>

3) Cria√ß√£o do Verificador de Sites:
Inicialmente √© criado uma simples fun√ß√£o em Python que que verifica se um site est√° online usando o pacote urllib e http. Para isso coloca-se o c√≥digo abaixo em uma sess√£o interativa:

>>> from http.client import HTTPConnection

>>> connection = HTTPSConnection("indicium.tech", port=80, timeout=10)
>>> connection.request("HEAD", "/")

>>> response = connection.getresponse()
>>> response.getheaders()
[('Date', 'Tue, 20 Sep 2022 18:10:37 GMT'), ('Content-Type', 'text/html'), ('Content-Length', '178'), ('Connection', 'keep-alive'), ('Cache-Control', 'max-age=600'), ('Location', 'https://www.globo.com/')]

Esse c√≥digo inicia criando uma conex√£o para uma URL usando a porta padr√£o HTTP 80. Em seguida, fazemos uma requisi√ß√£o para o caminho padr√£o "/" usando o m√©todo .request(). A resposta dessa requisi√ß√£o √© obtida pelo m√©todo .getresponse(). Finalmente, para evitar trazer todo o arquivo do site trazemos somente o HEADER. Se o request tiver sucesso, o site est√° online. Caso contr√°rio, retorn√° um erro.

Esta l√≥gica √© incluida em um arquivo checker.py que vai lidar com poss√≠veis erros:

# checker.py
from http.client import HTTPConnection
from urllib.parse import urlparse

def site_is_online(url, timeout=2):
    """Return True if the target URL is online.

    Raise an exception otherwise.
    """
    # Defines a generic Exception as placeholder
    error = Exception("Ops, algo errado.")
    # Parses URL and finds host
    parser = urlparse(url)
    host = parser.netloc or parser.path.split("/")[0]
    # Starts a for loop using HTTP and HTTPs ports
    for port in (80, 443):
        connection = HTTPConnection(host=host, port=port, timeout=timeout)
        try:
            connection.request("HEAD", "/")
            return True
        except Exception as e:
            error = e
        finally:
            connection.close()
    raise error

Para testar a fun√ß√£o rec√©m criada, abra uma sess√£o interativa no Python e rode o c√≥digo abaixo:

>>> from sitechecker.checker import site_is_online

>>> site_is_online("indicium.tech")
True

>>> site_is_online("incidium.tech")

4) Cria√ß√£o do CLI:
Para criar uma aplica√ß√£o de linha de comando (CLI) √© utilizado o argparse do python. Para isso, precisa-se criar uma classe ArgumentParser que recebe argumentos da linha de comando.

# cli.py

import argparse

def read_user_cli_args():
    """Handle the CLI arguments and options."""
    parser = argparse.ArgumentParser(
        prog="sitechecker", description="Teste a disponibilidade de uma URL"
    )
    parser.add_argument(
        "-u",
        "--urls",
        metavar="URLs",
        nargs="+",
        type=str,
        default=[],
        help="insira um ou mais URLs",
    )
    return parser.parse_args()

Assim, t√™m-se uma fun√ß√£o que recebe argumentos do CLI, por√©m, √© necess√°rio retornar algo para nosso usu√°rio. Para isso, √© criada uma fun√ß√£o que retorna uma mensagem de sucesso se o site estiver online ou de fracasso se o site n√£o est√° online.

# cli.py
# ...

def display_check_result(result, url, error=""):
    """Display the result of a connectivity check."""
    print(f'O status da "{url}" √©:', end=" ")
    if result:
        print('"Online!" üëç')
    else:
        print(f'"Offline?" üëé \n  Erro: "{error}"')

5) Unindo todo o c√≥digo:
Ap√≥s realizar toda a l√≥gica separada, √© o momento de uni-l√° no arquivo checker.py com cli.py. Para isso √© criado um arquivo __main__.py que permite executar o pacote como um execut√°vel usando python -m <nome_do_pacote>.

Ent√£o em primeiro lugar uma fun√ß√£o main(), que l√™ os argumentos do CLI, √© criada e chamar√° as demais fun√ß√µes necess√°rias:

# __main__.py

import sys

from sitechecker.cli import read_user_cli_args

def main():
    """Run Site Checker."""
    user_args = read_user_cli_args()
    urls = user_args.urls
    if not urls:
        print("Erro: sem URLs para analisar.", file=sys.stderr)
        sys.exit(1)
    _site_check(urls)

Logo vemos que esse c√≥digo n√£o ir√° rodar porque ainda n√£o est√° definida a fun√ß√£o _site_check(). Esta fun√ß√£o vai iterar sobre uma lista de URLs obtida dos argumentos do CLI e aplicar a fun√ß√£o site_is_online() que foi definida anteriormente. Em caso de sucesso, ela retornar√° True. E False se a consulta retornar um erro.

# __main__.py

import pathlib
import sys

from sitechecker.cli import read_user_cli_args

def main():
    # ...

def _site_check(urls):
    for url in urls:
        error = ""
        try:
            result = site_is_online(url)
        except Exception as e:
            result = False
            error = str(e)
        display_check_result(result, url, error)
        

